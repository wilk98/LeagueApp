// <auto-generated />
using System;
using LeagueApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeagueApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240221010900_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LeagueApp.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");

                    b.HasData(
                        new
                        {
                            LeagueId = 1,
                            Name = "Liga Belgijska"
                        });
                });

            modelBuilder.Entity("LeagueApp.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"), 1L, 1);

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBest")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("ScoreAway")
                        .HasColumnType("int");

                    b.Property<int>("ScoreHome")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            MatchId = 1,
                            AwayTeamId = 2,
                            HomeTeamId = 1,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 24, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 0,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 2,
                            AwayTeamId = 4,
                            HomeTeamId = 3,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 24, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 0,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 3,
                            AwayTeamId = 6,
                            HomeTeamId = 5,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 2,
                            ScoreHome = 0
                        },
                        new
                        {
                            MatchId = 4,
                            AwayTeamId = 8,
                            HomeTeamId = 7,
                            IsBest = true,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 24, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 2,
                            ScoreHome = 3
                        },
                        new
                        {
                            MatchId = 5,
                            AwayTeamId = 10,
                            HomeTeamId = 9,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 23, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 1,
                            ScoreHome = 1
                        },
                        new
                        {
                            MatchId = 6,
                            AwayTeamId = 12,
                            HomeTeamId = 11,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 23, 18, 15, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 2,
                            ScoreHome = 0
                        },
                        new
                        {
                            MatchId = 7,
                            AwayTeamId = 14,
                            HomeTeamId = 13,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 23, 18, 15, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 0,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 8,
                            AwayTeamId = 16,
                            HomeTeamId = 15,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 1,
                            ScoreHome = 3
                        },
                        new
                        {
                            MatchId = 9,
                            AwayTeamId = 18,
                            HomeTeamId = 17,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 22, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 1,
                            ScoreAway = 2,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 10,
                            AwayTeamId = 13,
                            HomeTeamId = 6,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 31, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 0,
                            ScoreHome = 1
                        },
                        new
                        {
                            MatchId = 11,
                            AwayTeamId = 11,
                            HomeTeamId = 14,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 31, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 1,
                            ScoreHome = 0
                        },
                        new
                        {
                            MatchId = 12,
                            AwayTeamId = 7,
                            HomeTeamId = 16,
                            IsBest = true,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 31, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 1,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 13,
                            AwayTeamId = 17,
                            HomeTeamId = 8,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 31, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 1,
                            ScoreHome = 3
                        },
                        new
                        {
                            MatchId = 14,
                            AwayTeamId = 9,
                            HomeTeamId = 18,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 30, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 1,
                            ScoreHome = 1
                        },
                        new
                        {
                            MatchId = 15,
                            AwayTeamId = 1,
                            HomeTeamId = 12,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 30, 18, 15, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 0,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 16,
                            AwayTeamId = 5,
                            HomeTeamId = 4,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 30, 18, 15, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 1,
                            ScoreHome = 2
                        },
                        new
                        {
                            MatchId = 17,
                            AwayTeamId = 3,
                            HomeTeamId = 2,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 30, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 0,
                            ScoreHome = 1
                        },
                        new
                        {
                            MatchId = 18,
                            AwayTeamId = 15,
                            HomeTeamId = 10,
                            IsBest = false,
                            LeagueId = 1,
                            MatchTime = new DateTime(2022, 7, 29, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            RoundNumber = 2,
                            ScoreAway = 0,
                            ScoreHome = 1
                        });
                });

            modelBuilder.Entity("LeagueApp.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"), 1L, 1);

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            LeagueId = 1,
                            Name = "Westerlo"
                        },
                        new
                        {
                            TeamId = 2,
                            LeagueId = 1,
                            Name = "Cercle Brugge"
                        },
                        new
                        {
                            TeamId = 3,
                            LeagueId = 1,
                            Name = "Anderlecht"
                        },
                        new
                        {
                            TeamId = 4,
                            LeagueId = 1,
                            Name = "Oostende"
                        },
                        new
                        {
                            TeamId = 5,
                            LeagueId = 1,
                            Name = "KV Mechelen"
                        },
                        new
                        {
                            TeamId = 6,
                            LeagueId = 1,
                            Name = "Antwerp"
                        },
                        new
                        {
                            TeamId = 7,
                            LeagueId = 1,
                            Name = "Club Brugge"
                        },
                        new
                        {
                            TeamId = 8,
                            LeagueId = 1,
                            Name = "Genk"
                        },
                        new
                        {
                            TeamId = 9,
                            LeagueId = 1,
                            Name = "St. Truiden"
                        },
                        new
                        {
                            TeamId = 10,
                            LeagueId = 1,
                            Name = "Royale Union SG"
                        },
                        new
                        {
                            TeamId = 11,
                            LeagueId = 1,
                            Name = "Kortrijk"
                        },
                        new
                        {
                            TeamId = 12,
                            LeagueId = 1,
                            Name = "Leuven"
                        },
                        new
                        {
                            TeamId = 13,
                            LeagueId = 1,
                            Name = "Waregem"
                        },
                        new
                        {
                            TeamId = 14,
                            LeagueId = 1,
                            Name = "Seraing"
                        },
                        new
                        {
                            TeamId = 15,
                            LeagueId = 1,
                            Name = "Charleroi"
                        },
                        new
                        {
                            TeamId = 16,
                            LeagueId = 1,
                            Name = "Eupen"
                        },
                        new
                        {
                            TeamId = 17,
                            LeagueId = 1,
                            Name = "St. Liege"
                        },
                        new
                        {
                            TeamId = 18,
                            LeagueId = 1,
                            Name = "Gent"
                        });
                });

            modelBuilder.Entity("LeagueApp.Models.TeamStats", b =>
                {
                    b.Property<int>("TeamStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamStatsId"), 1L, 1);

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("TeamStatsId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamStats");

                    b.HasData(
                        new
                        {
                            TeamStatsId = 1,
                            Draws = 0,
                            GoalsAgainst = 3,
                            GoalsFor = 4,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 1,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 2,
                            Draws = 0,
                            GoalsAgainst = 2,
                            GoalsFor = 1,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 2,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 3,
                            Draws = 0,
                            GoalsAgainst = 1,
                            GoalsFor = 2,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 3,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 4,
                            Draws = 0,
                            GoalsAgainst = 3,
                            GoalsFor = 2,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 4,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 5,
                            Draws = 0,
                            GoalsAgainst = 4,
                            GoalsFor = 1,
                            Losses = 2,
                            MatchesPlayed = 2,
                            Points = 0,
                            TeamId = 5,
                            Wins = 0
                        },
                        new
                        {
                            TeamStatsId = 6,
                            Draws = 0,
                            GoalsAgainst = 0,
                            GoalsFor = 3,
                            Losses = 0,
                            MatchesPlayed = 2,
                            Points = 6,
                            TeamId = 6,
                            Wins = 2
                        },
                        new
                        {
                            TeamStatsId = 7,
                            Draws = 0,
                            GoalsAgainst = 4,
                            GoalsFor = 4,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 7,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 8,
                            Draws = 0,
                            GoalsAgainst = 4,
                            GoalsFor = 5,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 8,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 9,
                            Draws = 2,
                            GoalsAgainst = 2,
                            GoalsFor = 2,
                            Losses = 0,
                            MatchesPlayed = 2,
                            Points = 2,
                            TeamId = 9,
                            Wins = 0
                        },
                        new
                        {
                            TeamStatsId = 10,
                            Draws = 1,
                            GoalsAgainst = 1,
                            GoalsFor = 2,
                            Losses = 0,
                            MatchesPlayed = 2,
                            Points = 4,
                            TeamId = 10,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 11,
                            Draws = 0,
                            GoalsAgainst = 2,
                            GoalsFor = 1,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 11,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 12,
                            Draws = 0,
                            GoalsAgainst = 0,
                            GoalsFor = 4,
                            Losses = 0,
                            MatchesPlayed = 2,
                            Points = 6,
                            TeamId = 12,
                            Wins = 2
                        },
                        new
                        {
                            TeamStatsId = 13,
                            Draws = 0,
                            GoalsAgainst = 1,
                            GoalsFor = 2,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 13,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 14,
                            Draws = 0,
                            GoalsAgainst = 3,
                            GoalsFor = 0,
                            Losses = 2,
                            MatchesPlayed = 2,
                            Points = 0,
                            TeamId = 14,
                            Wins = 0
                        },
                        new
                        {
                            TeamStatsId = 15,
                            Draws = 0,
                            GoalsAgainst = 2,
                            GoalsFor = 3,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 15,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 16,
                            Draws = 0,
                            GoalsAgainst = 4,
                            GoalsFor = 3,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 3,
                            TeamId = 16,
                            Wins = 1
                        },
                        new
                        {
                            TeamStatsId = 17,
                            Draws = 1,
                            GoalsAgainst = 5,
                            GoalsFor = 3,
                            Losses = 1,
                            MatchesPlayed = 2,
                            Points = 1,
                            TeamId = 17,
                            Wins = 0
                        },
                        new
                        {
                            TeamStatsId = 18,
                            Draws = 2,
                            GoalsAgainst = 3,
                            GoalsFor = 3,
                            Losses = 0,
                            MatchesPlayed = 2,
                            Points = 2,
                            TeamId = 18,
                            Wins = 0
                        });
                });

            modelBuilder.Entity("LeagueApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<string>("FansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FavoriteTeamsTeamId")
                        .HasColumnType("int");

                    b.HasKey("FansId", "FavoriteTeamsTeamId");

                    b.HasIndex("FavoriteTeamsTeamId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("LeagueApp.Models.Match", b =>
                {
                    b.HasOne("LeagueApp.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagueApp.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagueApp.Models.League", "League")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");
                });

            modelBuilder.Entity("LeagueApp.Models.Team", b =>
                {
                    b.HasOne("LeagueApp.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("LeagueApp.Models.TeamStats", b =>
                {
                    b.HasOne("LeagueApp.Models.Team", "Team")
                        .WithOne("Stats")
                        .HasForeignKey("LeagueApp.Models.TeamStats", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeagueApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeagueApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagueApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeagueApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("LeagueApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagueApp.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("FavoriteTeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeagueApp.Models.League", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("LeagueApp.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Stats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
